library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_signed.all;
use ieee.numeric_std.all;

ENTITY IR IS
PORT(clock_50 : IN std_logic;
     KEY : IN std_logic_vector(0 downto 0);
	  IRDA_RXD : IN std_logic
	  );
END IR;

Architecture structure of IR IS
signal iclk, iRST, iIRDA, oDATA_READY : std_logic;
signal oDATA, data, data_buf : std_logic_vector(31 downto 0);
signal IDLE_HIGH_DUR : integer range 0 to 262143;--data_count 262143*0.02us=5.24ms, threshold for DATAREAD->IDLE
signal GUIDE_LOW_DUR : integer range 0 to 230000;--idle_count 230000*0.02us=4.60ms, threshold for IDLE->GUIDANCE
signal GUIDE_HIGH_DUR : integer range 0 to 210000;--state_count 210000*0.02us=4.20ms, 
                                      -- 4.5-4.2=0.3ms<BIT_AVAILABLE_DUR=0.4ms, threshold for GUIDANCE->DATAREAD
signal DATA_HIGH_DUR : integer range 0 to 41500; -- data_count 41500*0.02us=0.83ms, 
                                      -- sample time from the positive_edge of iIRDA
signal BIT_AVAILABLE_DUR : integer range 0 to 20000; -- data_count 20000*0.02us=0.4ms, 
                                      -- the sample bit pointer, can inhibit the interference from iIRDA signal
signal idle_count: integer range 0 to 230000; -- to be comparedto GUIDE_LOW_DUR
signal state_count : integer range 0 to 210000; -- to be compared to GUIDE_HIGH_DUR
signal data_count : integer range 0 to 262143; -- to be compared to IDLE_HIGH_DUR
signal HEX_idle_count, HEX_state_count, HEX_data_count : std_logic_vector(17 downto 0);
signal idle_count_flag, state_count_flag, data_count_flag, data_ready : std_logic;
signal bitcount: integer range 0 to 20000;

-- declare (state-machine) enumerated type
type FSM_STATES IS (IDLE, GUIDANCE, DATAREAD);
-- Attribute to declare a specific encoding for the states
attribute syn_encoding : string;
attribute syn_encoding of FSM_STATES:type IS "00 01 10";

-- declare signals of FSM_STATES type
signal Present_State, Next_State : FSM_STATES;

begin
iCLK <= Clock_50;
iRST <= KEY(0);
iIRDA <= IRDA_RXD;

process (iCLK, iRST)
begin
  if (iRST = '0') then
    idle_count <= 0;
  elsif (rising_edge(iCLK) AND idle_count_flag = '1') then   -- the counter works when the flag is 1
    idle_count <= idle_count + 1;  -- increment how many times the FSM has gone into the IDLE state
    HEX_idle_count <= std_logic_vector(to_unsigned(idle_count, HEX_idle_count'length));
  else 
    idle_count <=0;              -- the counter resets if flag is 0
  end if;
end process;

process(iCLK, iRST)
begin
  if (iRST = '0') then
     idle_count_flag <= '0';
  elsif ((Present_State = IDLE) AND (iIRDA = '0')) then
     idle_count_flag <= '1';
  else
     idle_count_flag <= '0';
  end if;
end process;

process(iCLK, iRST)
begin 
   if (iRST= '0') then
	   state_count <= 0;
	elsif (rising_edge(iCLK) AND state_count_flag = '1') then
	   state_count <= state_count + 1;   -- the counter works when the flag is 1
	else
	   state_count <= 0;    -- the counter resets if flag is 0
	end if;
end process;

process(iCLK, iRST)
begin
   if (iRST= '0') then
	   state_count_flag <= '0';
	elsif ((Present_State = GUIDANCE) AND (iIRDA = '1')) then
	   state_count_flag <= '1';
	else
	   state_count_flag <= '0';
	end if;
end process;

process(iCLK, iRST)
begin 
   if (iRST = '0') then
	   data_count <= 0;
	elsif (rising_edge(iCLK) AND data_count_flag= '1') then
	   data_count <= data_count + 1;   -- the counter works when the flag is 1
	else
	   data_count <= 0;    -- the counter resets if flag is 0
	end if;
	

end process;

process(iCLK, iRST)
begin
   if (iRST = '0') then
	   data_count_flag <= '0';
	elsif ((Present_State = DATAREAD) AND (iIRDA = '1')) then
	   data_count_flag <= '1';
	else
	   data_count_flag <= '0';
	end if;
end process;

process(iCLK, iRST)
begin 
   if (iRST = '0') then
	   bitcount <= 0;
   elsif (rising_edge(iCLK) AND Present_State = DATAREAD) then
	   if (data_count = 20000) then
		   bitcount <= bitcount + 1;
		end if;
	else
	   bitcount <= 0;
	end if;
end process;

--- change states
process (iCLK, iRST)
begin
if (rising_edge(iCLK)) then
   if (iRST = '0') then
	   Present_State <= IDLE;
		
	else
	
	   case Present_State IS
	  
	      when IDLE => 
			    if (idle_count > GUIDE_LOW_DUR) then -- State change form IDLE to GUIDANCE
			       Next_State <= GUIDANCE;
				 end if;
				 
			when GUIDANCE =>
			    if (state_count > GUIDE_HIGH_DUR) then  -- State change from GUIDANCE to DATAREAD
				    Next_State <= DATAREAD;
				 end if;
				
			when DATAREAD =>
			    if ((data_count >= IDLE_HIGH_DUR) OR (bitcount >= 33)) then 
				    Next_State <= IDLE;
				 end if;
				 
			when OTHERS => 
			    Next_State <= IDLE;   -- default
				 
			END case;
  end if;
 end if;
end process;

process (iCLK, iIRDA)
begin
  if (iRST = '0') then  
     data <= "00000000000000000000000000000000";
  elsif (rising_edge(iCLK) AND Present_State = DATAREAD) then
     if (data_count >= DATA_HIGH_DUR) then  -- 2^15 = 32767*0.02us = 0.64ms
	     data(bitcount-1) <= '1';              
     end if;
  else
     data <= "00000000000000000000000000000000";
  end if;
end process;

process (iCLK,iRST)
begin
if (iRST = '0') then  
   data_ready <= '0';
elsif (rising_edge(iCLK) AND bitcount = 32) then
   if (data(31 downto 24) = NOT(data(23 downto 16))) then
	   data_buf <= data;  -- fetch the value from the databuf from the data register
		data_ready <= '1';  -- set the data_ready flag 
    else
      data_ready <= '0';      -- data error
	 end if;
else
   data_ready <= '0';
end if;
end process;

process (iCLK, iRST)
begin
 if (iRST = '0') then 
   oDATA <= "00000000000000000000000000000000";
 elsif (rising_edge(iCLK) AND data_ready = '1') then
   oDATA <= data_buf;  -- output the data
 end if;
end process;

end structure;

		
	  